@mixin break($media) {
    @if type-of($media) == "number" {
        @if unit($media) == "px" {
            @media screen and (min-width: #{$media}) {
                @content;
            }
        }
        @else {
            @media screen and (min-width: #{$media}em) {
                @content;
            }
        }
    }
    @else if $media == retina {
        @media screen and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            @content;
        }
    }
    @else {
        @media screen and (#{$media}) {
            @content;
        }
    }
}

@mixin opacity($opacity: 100) {
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity})";
    filter: alpha(opacity = $opacity);
    -moz-opacity: $opacity / 100;
    -khtml-opacity: $opacity / 100;
    opacity: $opacity / 100;
}

@mixin box {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -o-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

// Covert px to em
@function em($px, $base: $base-font-size) {
    @return $px / $base * 1em;
}

// Covert px to rem
@function rem($px, $base: $base-font-size) {
    @return $px / $base * 1rem;
}